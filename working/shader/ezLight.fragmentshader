#version 330 core

struct Material {
	float shininess ;

	sampler2D texture_diffuse1 ;
	sampler2D texture_specular1 ;
} ;

struct DireLight {
	vec3 direction ;

	vec3 ambient;
    vec3 diffuse;
    vec3 specular;
} ;

struct PointLight {
	vec3 position ;

	vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;

} ;

struct SpotLight {
	vec3 position ;
	vec3 direction ;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};





#define NR_POINT_LIGHTS 4  

in vec3 Normal ;
in vec3 FragPos;  
in vec2 TexCoords ;

// Ouput data
out vec4 color;

uniform DireLight dirLight ;
uniform PointLight pointLights[NR_POINT_LIGHTS] ;
uniform SpotLight spotLight ;
uniform Material material ; 
uniform vec3 cameraPos ;


vec3 CalcSpotLight( SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir) ;
vec3 CalcDirLight( DireLight light, vec3 normal, vec3 viewDir ) ;
vec3 CalcPointLight( PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir ) ;


void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize( cameraPos - FragPos ) ;
	vec3 result = CalcDirLight( dirLight, norm, viewDir ) ;

	for( int i = 0 ; i < NR_POINT_LIGHTS ; i++ ) {
		result += CalcPointLight( pointLights[i], norm, FragPos, viewDir ) ;
	}

	result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    

	// Linearly interpolate between both textures (second texture is only slightly combined)
	color = vec4(result, 1.0f);
	//color = texture( ourTexture1, TexCoord ) ;

	

}


// Calculates the color when using a spot light.
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // Spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // Combine results
    vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}


vec3 CalcDirLight( DireLight light, vec3 normal, vec3 viewDir ) {

	vec3 lightDir = normalize(-light.direction);

	float diff = max(dot(normal, lightDir), 0.0);
	

	vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);


	// ambient
	vec3 ambient = light.ambient * vec3(texture( material.texture_diffuse1, TexCoords ));
	vec3 diffuse = light.diffuse * ( diff * vec3(texture( material.texture_diffuse1, TexCoords )) ) ;
	vec3 specular = light.specular * ( spec * vec3(texture( material.texture_specular1, TexCoords ) ) ) ;

	return (ambient + diffuse + specular) ;

}
vec3 CalcPointLight( PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir ) {

	vec3 lightDir = normalize( light.position - fragPos ) ;

	float diff = max(dot(normal, lightDir), 0.0);
	

	vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // Attenuation
    float distance = length( light.position - fragPos ) ;
    float attenuation = 1.0f / 
    							(light.constant 
    							+ light.linear * distance
    							+ light.quadratic * (distance * distance));  



	// ambient
	vec3 ambient = light.ambient * vec3(texture( material.texture_diffuse1, TexCoords ));
	vec3 diffuse = light.diffuse * ( diff * vec3(texture( material.texture_diffuse1, TexCoords )) ) ;
	vec3 specular = light.specular * ( spec * vec3(texture( material.texture_specular1, TexCoords ) ) ) ;

	ambient *= attenuation ;
	diffuse *= attenuation ;
	specular *= attenuation ;

	return (ambient + diffuse + specular) ;
}